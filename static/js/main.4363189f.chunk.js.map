{"version":3,"sources":["components/DataRow/index.js","components/DataLabels/index.js","components/DataTable/index.js","components/SearchBar/index.js","utils/API.js","components/Main/index.js","components/Wrapper/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["DataRow","props","src","data","image","className","alt","labels","map","index","Object","keys","filter","key","DataLabels","arrow","toggleState","toggle","scope","id","labelName","onClick","dataToggle","toggleBtn","DataTable","useState","employees","setEmployeesState","setToggleState","useEffect","apiData","colLabels","event","btn","currentTarget","newToggleState","sw","prevState","arr","sort","a","b","toLowerCase","searchState","searchVal","searchTerm","lableVal","person","includes","checkSearch","SearchBar","Dropdown","Toggle","variant","Menu","Item","setSearch","type","placeholder","value","onChange","aria-label","aria-describedby","API","getUsers","axios","get","Main","initEmployees","setInitEmployees","columnLabels","setColumnLables","setSearchState","then","tmp","results","temp","picture","medium","name","first","last","phone","email","dob","date","split","splice","length","col","classList","newStateVal","target","trim","newStateKey","Wrapper","children","Header","class","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4363189f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction DataRow(props) {\r\n  return (\r\n    <tr>\r\n        <td>\r\n            <img src={props.data.image} className=\"img-fluid img-thumbnail\" alt=\"profile\"/>\r\n        </td>\r\n        {props.labels.map((data, index) => {\r\n          return(\r\n            <td key={index}>\r\n                {props.data[Object.keys(props.data).filter(key => key===data)]}\r\n            </td>\r\n          )\r\n        })}\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default DataRow;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction DataLabels(props) {\r\n    let arrow = \"\";\r\n    if(props.toggleState.toggle===null){    // when toggle is null arrow indicates empty1\r\n        arrow = \"\";\r\n    }else if(!props.toggleState.toggle) {   // when toggle is false arrow indicates down\r\n        arrow = \"üëá\";\r\n    }else{                                  // when toggle is true arrow indicates up\r\n        arrow = \"‚òùÔ∏è\";\r\n    };\r\n\r\n    return( \r\n        <tr>\r\n            <th scope=\"col\" id={\"employee-image\"}>\r\n                <div className=\"btn btn-dark disabled\"><span className=\"row\"><div>Image</div></span></div>\r\n            </th>\r\n            {props.labels.map((labelName, index) => {\r\n                return(\r\n                    <th scope=\"col\" key={index}>\r\n                        <button onClick={props.dataToggle} id={labelName} className=\"btn btn-dark\">\r\n                            <span className=\"row\">\r\n                                <div>{labelName}</div>\r\n                                <div className={props.toggleState.toggleBtn===labelName ? \"active\" : \"hide\"}>\r\n                                    {arrow}\r\n                                </div>\r\n                            </span>\r\n                        </button>\r\n                    </th>\r\n                )\r\n            })}\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default DataLabels;","import React, { useState, useEffect } from \"react\";\r\nimport \"./style.css\";\r\nimport DataRow from \"../DataRow/index\";\r\nimport DataLabels from \"../DataLabels\";\r\n\r\nfunction DataTable(props) {\r\n    const [employees, setEmployeesState] = useState([]);\r\n    const [toggleState, setToggleState] = useState({  \r\n        toggle: null,\r\n        toggleBtn: null \r\n    });\r\n\r\n    useEffect(() => {\r\n        setEmployeesState(props.apiData);\r\n    }, [props.apiData]);\r\n\r\n    const checkSearch = (searchState) => {\r\n        const searchVal = searchState.searchTerm;\r\n        const lableVal = searchState.filter;\r\n        let results;\r\n      \r\n        results = employees.filter(person =>\r\n            person[Object.keys(person).filter(key => key===lableVal)].toLowerCase().includes(searchVal.toLowerCase())\r\n        );\r\n\r\n        return results;\r\n    };\r\n\r\n    const toggler = (event) => {\r\n        const btn = event.currentTarget.id; // current lable button id.\r\n        const colChange = (btn===toggleState.toggleBtn) ? false : true; // boolean indicating whether the user has selected a lable button for a different column. \r\n        const newToggleState = colChange ? true : !toggleState.toggle; // if the user has changed col, then newToggleState is forced true, otherwise toggle the current toggle state.\r\n        const phoneToggle = btn===\"phone\" ? -1 : 1;\r\n        const sw = (newToggleState ? 1 : -1)*(phoneToggle);  // toggle direction logical switch.\r\n\r\n        // set updated toggle state, allowing for toggle direction indicator to be rendered on the appropriate button lable and direction.\r\n        setToggleState((prevState)=> {  \r\n            return { ...prevState, \r\n                toggle: newToggleState,\r\n                toggleBtn: btn\r\n            }\r\n        })\r\n\r\n        // sort employees array aphabetically in assending and decending order depending on the value of the toggle direction logical switch \"sw\".\r\n        const arr = employees.sort((a, b) => {\r\n            if(a[btn].toLowerCase() < b[btn].toLowerCase()) {\r\n                return -1*sw;\r\n            }else if(a[btn].toLowerCase() > b[btn].toLowerCase()){\r\n                return 1*sw;\r\n            }else{\r\n                return 0\r\n            }\r\n        });\r\n\r\n        // set employees state with the contents of the newly sorted array \"arr\".\r\n        setEmployeesState(arr);\r\n    };\r\n\r\n    return( \r\n        <table className=\"table table-striped table-dark\">\r\n            <thead>\r\n                <DataLabels\r\n                    labels={props.colLabels}\r\n                    dataToggle={toggler}\r\n                    toggleState={toggleState}\r\n                />\r\n            </thead>\r\n            <tbody>\r\n                {checkSearch(props.searchState).map((data, index) => {\r\n                    return(\r\n                        <DataRow\r\n                            key={index}\r\n                            data={data}\r\n                            labels={props.colLabels}\r\n                        />\r\n                    )\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default DataTable;","import React from \"react\";\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport \"./style.css\";\r\n\r\nfunction SearchBar(props) {\r\n    return( \r\n        <div className=\"input-group mb-3 mt-3\">\r\n            <Dropdown>\r\n                <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                    {props.searchVal.filter}\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                    {props.colLabels.map((labelName, index) => {\r\n                        return(\r\n                            <Dropdown.Item \r\n                                key={index} \r\n                                onClick={props.setSearch} \r\n                                id={labelName}\r\n                            >\r\n                                {labelName}\r\n                            </Dropdown.Item>\r\n                        )\r\n                    })}\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n\r\n            <input \r\n                type=\"text\" \r\n                className=\"form-control\" \r\n                placeholder={\"search \" + props.searchVal.filter}\r\n                value={props.searchVal.searchTerm}\r\n                onChange={props.setSearch} \r\n                aria-label=\"Example text with button addon\" \r\n                aria-describedby=\"button-addon1\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBar;","import axios from \"axios\";\r\n\r\nconst API = {\r\n    getUsers: function() {\r\n        return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n    }\r\n}\r\n\r\nexport default API;","import React,{ useState, useEffect } from \"react\";\r\nimport \"./style.css\";\r\nimport DataTable from \"../DataTable\";\r\nimport SearchBar from \"../SearchBar\";\r\nimport API from \"../../utils/API\";\r\n\r\nfunction Main () {\r\n  const [initEmployees, setInitEmployees] = useState([]);\r\n  const [columnLabels, setColumnLables] = useState([]);\r\n  const [searchState, setSearchState] = useState({\r\n    searchTerm: \"\",\r\n    filter: \"name\"\r\n  });\r\n  \r\n  useEffect(() => {\r\n    API.getUsers().then(data =>  {\r\n      const tmp = data.data.results.map((temp, index) => {\r\n        return {\r\n          key: index,\r\n          image: temp.picture.medium,\r\n          name: `${temp.name.first + \" \" + temp.name.last}`,\r\n          phone: temp.phone,\r\n          email: temp.email,\r\n          dob: temp.dob.date.split(\"-\")[0]\r\n        }\r\n      });\r\n      setInitEmployees(tmp);\r\n      setColumnLables(Object.keys(tmp[0]).splice(2,Object.keys(tmp[0]).length));\r\n    });\r\n  },[]);\r\n\r\n  const handleChange = event => {\r\n    const col = event.currentTarget.id;\r\n    const type = event.currentTarget.classList.value;\r\n    const newStateVal = type === \"form-control\" ? event.target.value.trim() : col;\r\n    const newStateKey = type === \"form-control\" ? \"searchTerm\" : \"filter\";\r\n  \r\n    setSearchState((prevState) => {\r\n      return { ...prevState, [newStateKey] : newStateVal}\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container col-12\">\r\n      <SearchBar setSearch={handleChange} searchVal={searchState} colLabels={columnLabels}/>\r\n      <DataTable searchState={searchState} apiData={initEmployees} colLabels={columnLabels}/>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Main;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return( \r\n        <div className=\"wrapper\">{props.children}</div>\r\n    );\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header() {\r\n    return( \r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n            <div class=\"container\">\r\n                <h1 class=\"display-4\">Employee Search Directory</h1>\r\n                <p class=\"lead\">Click table column labels to sort. Use dropdown integrated search feature to search by column</p>\r\n            </div>\r\n        </div> \r\n           \r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\nimport Main from \"./components/Main/index\";\nimport Wrapper from \"./components/Wrapper/index\";\nimport Header from \"./components/Header/index\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper>\n        <Header />\n        <Main />\n      </Wrapper>\n    </div>\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'popper.js/dist/popper';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}